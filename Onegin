#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <string.h>
#include <locale.h>
#include <assert.h>

struct text
{
    int length; /// колличество символов текста с 0 символом в конце
    int number_of_strings; /// число строк
    char* buff; ///исходный текст
    char** data; ///Массив указателей на новую строку

};


int text_read (struct text* my_text);
int array_new_line (struct text* my_text);
int compare_string_beginning (const void* a , const void* b);
int compare_string_end (const void* a , const void* b);
int text_write (struct text* my_text);
void type_sort(struct text* my_text);




int main()
{
    setlocale(LC_ALL, "Russian");
    struct text my_text;

    printf("Onegin sort.\n"
           "Read from data.txt\n");

    text_read (&my_text);
    array_new_line (&my_text);

    //printf ("%d\n" , a);
    //printf ("Text:\n%send" , my_text.data[2]);


  //  qsort(my_text.data  , my_text.number_of_strings , sizeof(char**) , compare_string_end);
   // text_write(&my_text);

    type_sort(&my_text);

    free(my_text.buff);
    free(my_text.data);
    return 0;
}


int text_read (struct text* my_text)
{
    assert (my_text);

    FILE* file_adress = fopen("data.txt" , "r");

    if(!file_adress)
    {
        printf ("invalid address of input file!\n");
        exit(0);
    }



    struct stat text;
    stat("data.txt",&text);
    my_text -> length = text.st_size / sizeof(char);

    //printf ("%d \n" , my_text->length);

    my_text -> buff = (char*) calloc(my_text -> length + 2 , sizeof(char));

    assert (my_text->buff);

    my_text -> buff[0] = '\n';
    my_text -> length = fread (my_text -> buff + 1, sizeof(char) , my_text -> length , file_adress) + 2;
    my_text -> buff[my_text -> length] = '\n';
    fclose(file_adress);

    return my_text -> length;

}


int array_new_line (struct text* my_text)
{
    int i = 0 , j = 0;
    my_text -> number_of_strings = -1;


    for (i = 0 ; i <= my_text -> length ; i++)
    {
        if (my_text -> buff[i] == '\n')
        {
            my_text -> buff[i] = 0;
            (my_text -> number_of_strings)++;
        }

    }

    my_text -> data = (char*) calloc(my_text -> number_of_strings + 1, sizeof(char*));

    assert(my_text->data);


    for (i = 0 , j = 0 ; i < (my_text -> length) ; i++)
    {
        if (my_text -> buff[i] == 0)
        {
            my_text -> data[j] = my_text -> buff + i;
            j++;
            //printf("\n%d --- %d\n" , my_text -> data[j-1] , &my_text -> buff[i]);
        }
    }


    return my_text -> number_of_strings;


}


int compare_string_beginning (const void* a , const void* b)
{
    //printf ("==%s %s==" , *(char**)a , *(char**)b);
    char* str1 = *(char**)a + 1;
    char* str2 = *(char**)b + 1;

    //printf ("%d-%d = %d-%d\n" , str1 , *(str1) , str2 , *(str2));
    while (ispunct(*str1) || isspace(*str1)) str1++;
    if (*str1 == 0) return 1;
    while (ispunct(*str2) || isspace(*str2)) str2++;
    if (*str2 == 0) return -1;

    return strcmp (str1, str2);
}

int compare_string_end (const void* a , const void* b)
{
    char* str1 = *(char**)a + 1;
    char* str2 = *(char**)b + 1;

    while(*str1 != 0) str1++;
    while(*str2 != 0) str2++;

    str1--;
    str2--;

    while (ispunct(*str1) || isspace(*str1)) str1--;
    if (*str1 == 0) return 1;
    while (ispunct(*str2) || isspace(*str2)) str2--;
    if (*str2 == 0) return -1;

    while ((*str1 != 0) || (*str2 != 0))
    {
        //printf("%s - %s \n" , str1 , str2);
        while (ispunct(*str2) || isspace(*str2)) str2--;
        while (ispunct(*str1) || isspace(*str1)) str1--;
        if(*str1 > *str2)
        {
            //printf("return 1\n");
            return 1;
        }
        if(*str1 < *str2)
        {
            //printf("return -1\n");
            return -1;
        }
        str1--;
        str2--;
    }

    return 0;
}


int text_write (struct text* my_text)
{
    char output[100];
    printf("Name of the output file or \"std\" to print on the screen: ");
    scanf ("%s" , output);
    FILE* out = stdout;
    if (strcmp(output , "std"))
    {
        strcat(output , ".txt");
        printf("Output file: %s\n" , output);
        out = fopen(output, "w");
        //freopen(output , "w" , stdout);
    }
    else
        printf("Output on the screen:\n"
               "---------------------\n");


    int i = 0;
    for (i = 0 ; i < my_text -> number_of_strings-1  ; i++)
    {
        fprintf (out , "%s\n" , (my_text -> data[i] + 1));
    }
    fclose(output);
    printf("---------------------\n");
}

void type_sort(struct text* my_text)
{
    char type;
    printf("Choose the type of sorting: \"b\" to sort from the beginning and \"e\" to sort from the end: ");
    scanf("%c" , &type);

    while ((type != 'b') && (type != 'e'))
    {
        printf("Invalid type! Try again : ");
        scanf("%c" , &type);
    }

    if(type == 'b')
    {
        qsort(my_text->data  , my_text->number_of_strings , sizeof(char**) , compare_string_beginning);
        text_write(my_text);
    }

    if(type == 'e')
    {
        qsort(my_text->data  , my_text->number_of_strings , sizeof(char**) , compare_string_end);
        text_write(my_text);
    }
}



